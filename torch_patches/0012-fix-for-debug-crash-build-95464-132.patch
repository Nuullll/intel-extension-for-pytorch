From 25af877b8f88d0fc59aa80bfb3088e22dbdbc29c Mon Sep 17 00:00:00 2001
From: chengjunlu <chengjun.lu@intel.com>
Date: Wed, 7 Jun 2023 11:14:06 +0800
Subject: [PATCH 12/25] fix for debug crash build (#95464) (#132)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fixes https://github.com/pytorch/pytorch/issues/94376

⚠️ Hacky fix

Details about use of `noop_vtable`:
https://github.com/pytorch/pytorch/blob/d677432b706904f84b08bfee5d8bec7c4e220894/c10/core/impl/PyInterpreter.h#L92-L102

Currently, at destruction, `noop_vtable` goes out of scope first while there are dangling references to the object still present with other objects like `PythonKernelHolder` which is held by the singleton `Dispatcher`.

Pull Request resolved: https://github.com/pytorch/pytorch/pull/95464
Approved by: https://github.com/ezyang

Co-authored-by: kshitij12345 <kshitijkalambarkar@gmail.com>
---
 c10/core/impl/PyInterpreter.cpp | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/c10/core/impl/PyInterpreter.cpp b/c10/core/impl/PyInterpreter.cpp
index 2f8f2fa7307..d574de071d7 100644
--- a/c10/core/impl/PyInterpreter.cpp
+++ b/c10/core/impl/PyInterpreter.cpp
@@ -97,9 +97,16 @@ struct NoopPyInterpreterVTable final : public PyInterpreterVTable {
   };
 };
 
+// Construct this in Global scope instead of within `disarm`
+// where it will be only initialized first time `disarm` is called.
+// This increases the likelihood `noop_vtable` lives longer than
+// any object that refers to it.
+
+// If `noop_vtable` goes out of scope first, other objects will have dangling
+// reference to it.
+static NoopPyInterpreterVTable noop_vtable;
+
 void PyInterpreter::disarm() noexcept {
-  // Intentionally leaked
-  static NoopPyInterpreterVTable noop_vtable;
   vtable_ = &noop_vtable;
 }
 
-- 
2.34.1

